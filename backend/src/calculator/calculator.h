#ifndef CALCULATOR
#define CALCULATOR


/**
 * @file calculator.h
 * @brief Заголовочный файл арифметического парсера выражений.
 *
 * Содержит объявления функций для пошагового парсинга и вычисления арифметических выражений.
 * Поддерживаются операции: `+`, `-`, `*`, `/`, а также скобки.
 *
 * Основная точка входа: функция `calculate()`, которая принимает строку
 * с выражением и возвращает результат типа `long double`.
 *
 * Реализация основана на рекурсивном спуске.
 *
 * @see calculator.c
 */



 /**
 * @brief Парсит и возвращает число (long double) из строки.
 *
 * Использует `sscanf()` для извлечения числа и смещает указатель в строке
 * на количество считанных символов.
 *
 * @param[in,out] str Указатель на строку. После вызова будет указывать на следующий символ.
 * @return Значение числа, считанного из строки.
 */
long double parse_number(const char **str);



/**
 * @brief Парсит один множитель: либо число, либо выражение в скобках.
 *
 * Если текущий символ — `'('`, вызывается рекурсивный разбор подвыражения.
 * В противном случае вызывается `parse_number()`.
 *
 * @param[in,out] str Указатель на текущую позицию в строке.
 * @return Значение множителя.
 */
long double parse_factor(const char **str);



/**
 * @brief Парсит цепочку операций умножения и деления.
 *
 * Использует `parse_factor()` для получения первого значения,
 * затем обрабатывает `*` и `/` в приоритетном порядке.
 *
 * @param[in,out] str Указатель на текущую позицию в строке.
 * @return Результат выражения с операциями `*` и `/`.
 */
long double parse_partial_expression(const char **str);


/**
 * @brief Парсит полное выражение с учетом приоритетов операций.
 *
 * Сначала вызывает `parse_partial_expression()` (для `*` и `/`),
 * затем обрабатывает `+` и `-`.
 *
 * @param[in,out] str Указатель на текущую позицию в строке.
 * @return Результат вычисленного выражения.
 */
long double parse_expression(const char **str);


/**
 * @brief Главная функция вычисления выражения.
 *
 * Принимает строку с арифметическим выражением, например `"3 + 5 * (2 - 1)"`,
 * и возвращает вычисленный результат.
 *
 * @param input Строка с арифметическим выражением.
 * @return Результат вычисления выражения (тип `long double`).
 */
long double calculate(const char *input);

#endif
