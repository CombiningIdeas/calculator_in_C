#ifndef OUTPUT
#define OUTPUT


/**
 * @file output.h
 * @brief Заголовочный файл для обработки GET и POST HTTP-запросов сервера.
 *
 * Содержит объявления функций:
 * - `handle_get_request()` — для обработки GET-запросов и отправки JSON-ответа с текущей датой и конфигурацией.
 * - `handle_post_request()` — для обработки POST-запросов, выполнения вычислений и генерации HTML-ответа.
 *
 * Эти функции используются в HTTP-обработчике `ev_handler()` и обеспечивают взаимодействие сервера с пользователем.
 *
 * @see output.c
 */


#include "../../../mongoose/mongoose.h"


/**
 * @brief Обработка GET-запроса к серверу.
 *
 * Функция генерирует JSON-ответ, содержащий:
 * - Статус и сообщение об успешной обработке.
 * - Текущую дату и время.
 * - Версию, автора и параметры конфигурации.
 *
 * Используется структура `mg_connection` из библиотеки Mongoose для отправки ответа клиенту.
 *
 * @param c Указатель на соединение Mongoose, по которому пришёл запрос.
 *
 * @note Используется при обращении к `/api/get`.
 */
void handle_get_request(struct mg_connection *c);



/**
 * @brief Обработка POST-запроса, получение и вычисление выражения.
 *
 * - Извлекает выражение из POST-запроса (например, `"2+2*3"`).
 * - Вычисляет результат с помощью `calculate()` из модуля `calculator.h`.
 * - Подставляет выражение и результат в HTML-шаблон `OutputPage.html`.
 * - Отправляет получившийся HTML обратно клиенту.
 *
 * В случае ошибки загрузки шаблона возвращается HTTP-статус 500.
 *
 * @param c Указатель на соединение Mongoose.
 * @param hm Указатель на структуру `mg_http_message`, содержащую данные HTTP-запроса.
 *
 * @note Используется при обращении к `/api/post`.
 */
void handle_post_request(struct mg_connection *c, struct mg_http_message *hm);

#endif